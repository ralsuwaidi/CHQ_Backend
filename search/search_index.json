{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coders HQ Backend This repository holds the Coders-HQ backend. It is made using Django and Postgres as an API backend to the Coders-HQ frontend (based on React ) which is hosted in this repo . The main Coders-HQ website is hosted at codershq.ae . Table of Contents Coders HQ Backend Table of Contents Installation Pre requisites Building locally Building on Docker API Architecture Database Installation Pre requisites python 3 Pip (Optional) docker (Optional) httpie Building locally run pip install -r requirements.txt in root dir run python manage.py migrate run python manage.py createsuperuser run python manage.py runserver 0.0.0.0:33325 On a web browser open localhost:33325 Building on Docker Run docker-compose up in root dir and it will create the django and postgres apps, it will also run the web app On a web browser open localhost:33325 API All information related to the API, and how to use it, can be found here . Architecture The front-end will be located in its own repository which can connect to django's REST framework. The REST framework makes it easy to integrate any frontend to django's API which makes it possible to work on the front and backend separately. The final architecture should look something like this. \u251c\u2500\u2500chq_frontend | \u251c\u2500\u2500public/ | \u251c\u2500\u2500src/ | \u251c\u2500\u2500Dockerfile | \u251c\u2500\u2500package.json | \u2514\u2500\u2500package-lock.json \u251c\u2500\u2500CHQ_Backend | \u251c\u2500\u2500chq_backend/ | \u251c\u2500\u2500users/ // main django app | \u251c\u2500\u2500Dockerfile | \u251c\u2500\u2500entrypoint.sh // bash entrypoint for django to run commands before running the server | \u251c\u2500\u2500manage.py | \u251c\u2500\u2500requirements.txt | \u2514\u2500\u2500settings.ini \u2514\u2500\u2500docker-compose.yaml // for running multi-conatiner application Currently the docker-compose.yml is located inside this repository but will eventually be pulled out top integrate the frontend with the backend. Database Django should be connected to postgres (postgres can be installed locally or using docker) but there is an option to use sqlite for development. Sqlite should not be used for release. To switch between sqlite or postgres use the migrate function like so: $ ./manage.py migrate // for sqlite $ ./manage.py migrate --database=postgres // for postgres (must have an instance of postgres running) Docker makes it easy to set up postgres. The docker-compose.yaml file creates and connects the two containers (django+postgres) together, you can also create postgres by itself and connect to django which you build locally.","title":"Coders HQ Backend"},{"location":"#coders-hq-backend","text":"This repository holds the Coders-HQ backend. It is made using Django and Postgres as an API backend to the Coders-HQ frontend (based on React ) which is hosted in this repo . The main Coders-HQ website is hosted at codershq.ae .","title":"Coders HQ Backend"},{"location":"#table-of-contents","text":"Coders HQ Backend Table of Contents Installation Pre requisites Building locally Building on Docker API Architecture Database","title":"Table of Contents"},{"location":"#installation","text":"","title":"Installation"},{"location":"#pre-requisites","text":"python 3 Pip (Optional) docker (Optional) httpie","title":"Pre requisites"},{"location":"#building-locally","text":"run pip install -r requirements.txt in root dir run python manage.py migrate run python manage.py createsuperuser run python manage.py runserver 0.0.0.0:33325 On a web browser open localhost:33325","title":"Building locally"},{"location":"#building-on-docker","text":"Run docker-compose up in root dir and it will create the django and postgres apps, it will also run the web app On a web browser open localhost:33325","title":"Building on Docker"},{"location":"#api","text":"All information related to the API, and how to use it, can be found here .","title":"API"},{"location":"#architecture","text":"The front-end will be located in its own repository which can connect to django's REST framework. The REST framework makes it easy to integrate any frontend to django's API which makes it possible to work on the front and backend separately. The final architecture should look something like this. \u251c\u2500\u2500chq_frontend | \u251c\u2500\u2500public/ | \u251c\u2500\u2500src/ | \u251c\u2500\u2500Dockerfile | \u251c\u2500\u2500package.json | \u2514\u2500\u2500package-lock.json \u251c\u2500\u2500CHQ_Backend | \u251c\u2500\u2500chq_backend/ | \u251c\u2500\u2500users/ // main django app | \u251c\u2500\u2500Dockerfile | \u251c\u2500\u2500entrypoint.sh // bash entrypoint for django to run commands before running the server | \u251c\u2500\u2500manage.py | \u251c\u2500\u2500requirements.txt | \u2514\u2500\u2500settings.ini \u2514\u2500\u2500docker-compose.yaml // for running multi-conatiner application Currently the docker-compose.yml is located inside this repository but will eventually be pulled out top integrate the frontend with the backend.","title":"Architecture"},{"location":"#database","text":"Django should be connected to postgres (postgres can be installed locally or using docker) but there is an option to use sqlite for development. Sqlite should not be used for release. To switch between sqlite or postgres use the migrate function like so: $ ./manage.py migrate // for sqlite $ ./manage.py migrate --database=postgres // for postgres (must have an instance of postgres running) Docker makes it easy to set up postgres. The docker-compose.yaml file creates and connects the two containers (django+postgres) together, you can also create postgres by itself and connect to django which you build locally.","title":"Database"},{"location":"news/","text":"News sites can be linked to users so as their prefered news source. If no prefered news source is set then a default one will be chosen for the user. Users with prefered news sources will be able to see their news in their profile. The current supported news sources are: news_sites = { \"codinghorror\": \"https://api.rss2json.com/v1/api.json?rss_url=https%3A%2F%2Fblog.codinghorror.com%2Frss%2F\", \"lambda\": \"https://api.rss2json.com/v1/api.json?rss_url=http%3A%2F%2Flambda-the-ultimate.org%2Frss.xml\", \"bliki\": \"https://api.rss2json.com/v1/api.json?rss_url=http%3A%2F%2Fmartinfowler.com%2Fbliki%2Fbliki.atom\", \"joe\": \"https://api.rss2json.com/v1/api.json?rss_url=http%3A%2F%2Fwww.joelonsoftware.com%2Frss.xml\", \"feed\": \"https://api.rss2json.com/v1/api.json?rss_url=http%3A%2F%2Ffeeds.feedburner.com%2Ffreetechbooks\", \"orilly\": \"https://api.rss2json.com/v1/api.json?rss_url=http%3A%2F%2Fradar.oreilly.com%2Findex.rdf\", \"paul\": \"https://api.rss2json.com/v1/api.json?rss_url=http%3A%2F%2Ffeeds.feedburner.com%2FPaulGrahamUnofficialRssFeed\", \"reddit_programming\": \"https://www.reddit.com/r/programming/.json\" }","title":"News"},{"location":"challenges/kaggle_case_study/","text":"Kaggle Case Study Kaggle has four main types of challenges; Featured , Research , Getting started and Playground . Featured competition are targeted towards commercial while research challenges are more experimental. Getting started challenge category which is more user-friendly, simple but offer no prizes. Playground is a bit more advanced than Getting started but less complicated than Featured. It offers prizes that \"range from kudos to small cash prizes\". Getting started category has a smaller pool of leader-boards, that way new joiners can compare themselves with less people instead of thousands that may have a score in a certain challenge. Featured competitions are the types of competitions that Kaggle is probably best known for. These are full-scale machine learning challenges which pose difficult, generally commercially-purposed prediction problems. Feature challenges also offer prize money that can go up to 1 million dollar and is accessible by anyone. Kaggle also offers Recruitment challenges that are more targeted towards companies to \"to build machine learning models for corporation-curated challenges\". In Recruitment competitions, teams of size one compete to build machine learning models for corporation-curated challenges. At the competition\u2019s close, interested participants can upload their resume for consideration by the host. The prize is (potentially) a job interview at the company or organization hosting the competition. Competition Formats In addition to the different categories of competitions (e.g., \u201cfeatured\u201d), there are also a handful of different formats competitions are run in. Simple Competitions In a simple competition, users can access the complete datasets at the beginning of the competition, after accepting the competition\u2019s rules. As a competitor you will download the data, build models on it locally or in Notebooks , generate a prediction file, then upload your predictions as a submission on Kaggle. By far most competitions on Kaggle follow this format. Two-stage Competitions In two-stage competitions the challenge is split into two parts: Stage 1 and Stage 2, with the second stage building on the results teams achieved in Stage 1. Stage 2 involves a new test dataset that is released at the start of the stage. One example of such a competition is the Nature Conservancy Fisheries Monitoring Competition . Code Competitions Some competitions are code competitions. In these competitions all submissions are made from inside of a Kaggle Notebook, and it is not possible to upload submissions to the Competition directly. These competitions have two attractive features. The competition is more balanced, as all users have the same hardware allowances. And the winning models tend to be far simpler than the winning models in other competitions, as they must be made to run within the compute constraints imposed by the platform. Hardware restrictions may be implemented for this format. An example of a code competition is Quora Insincere Questions Classification . Joining a Competition Each competition in Kaggle has a homepage. This is an example of one. Rules : This contains the rules that govern your participation in the sponsor\u2019s competition. You must accept the competition\u2019s rules before downloading the data or making any submissions. Users who do not abide by the rules may have their submissions invalidated at the end of the competition or banned from the platform. Discussion : If anything is unclear or you have a question about participating, the competition\u2019s forums are the perfect place to ask. Overview : The information provided in the Overview tabs will vary from Competition to Competition. Five elements which are almost always included and should be reviewed are the \u201cDescription,\u201d \u201cData\u201d, \u201cEvaluation,\u201d \u201cTimeline,\u201d & \u201cPrizes\u201d sections. The description gives an introduction into the competition\u2019s objective and the sponsor\u2019s goal in hosting it. The data tab is where you can download and learn more about the data used in the competition. The evaluation section describes how to format your submission file and how your submissions will be evaluated. The timeline has detailed information on the competition timeline. The prizes section provides a breakdown of what prizes will be awarded to the winners, if prizes are relevant. This may come in the form of monetary, swag, or other perks. In addition to prizes, competitions may also award ranking points towards the Kaggle progression system. This is shown at the bottom of the Overview page. Once you have chosen a competition, read and accepted the rules, and made yourself aware of the competition deadlines, you are ready to submit! Forming a Team Everyone that competes in a Competition does so as a team. A team is a group of one or more users who collaborate on the competition. Weather you are on a team or not, submissions are limited per team. Team Leader : They are the primary point of contact when we need to communicate with a team, every other person in the team is a Member. Team Name : Anyone in the team can modify the team name by visiting the Team tab. Leaderboard One of the most important aspects of Kaggle Competitions is the Leaderboard: The Competition leaderboard has two parts. The public leaderboard provides publicly visible submission scores based on a representative sample of the submitted data. This leaderboard is visible throughout the competition. The private leaderboard , by contrast, tracks model performance on data unseen by participants. The private leaderboard thus has final say on whose models are best, and hence, who the winners and losers of the Competition will be. Summary Kaggle competition is aimed more towards machine learning and they have tools to upload data and use online notebooks which are written using python or R language only. They also have additional features: Teams Four challenge types Prizes that range from 'flairs' to large sums of money Leader boards Notebooks; user-friendly way to start coding Ways for commercial companies to make challenges","title":"Kaggle Case Study"},{"location":"challenges/kaggle_case_study/#kaggle-case-study","text":"Kaggle has four main types of challenges; Featured , Research , Getting started and Playground . Featured competition are targeted towards commercial while research challenges are more experimental. Getting started challenge category which is more user-friendly, simple but offer no prizes. Playground is a bit more advanced than Getting started but less complicated than Featured. It offers prizes that \"range from kudos to small cash prizes\". Getting started category has a smaller pool of leader-boards, that way new joiners can compare themselves with less people instead of thousands that may have a score in a certain challenge. Featured competitions are the types of competitions that Kaggle is probably best known for. These are full-scale machine learning challenges which pose difficult, generally commercially-purposed prediction problems. Feature challenges also offer prize money that can go up to 1 million dollar and is accessible by anyone. Kaggle also offers Recruitment challenges that are more targeted towards companies to \"to build machine learning models for corporation-curated challenges\". In Recruitment competitions, teams of size one compete to build machine learning models for corporation-curated challenges. At the competition\u2019s close, interested participants can upload their resume for consideration by the host. The prize is (potentially) a job interview at the company or organization hosting the competition.","title":"Kaggle Case Study"},{"location":"challenges/kaggle_case_study/#competition-formats","text":"In addition to the different categories of competitions (e.g., \u201cfeatured\u201d), there are also a handful of different formats competitions are run in.","title":"Competition Formats"},{"location":"challenges/kaggle_case_study/#simple-competitions","text":"In a simple competition, users can access the complete datasets at the beginning of the competition, after accepting the competition\u2019s rules. As a competitor you will download the data, build models on it locally or in Notebooks , generate a prediction file, then upload your predictions as a submission on Kaggle. By far most competitions on Kaggle follow this format.","title":"Simple Competitions"},{"location":"challenges/kaggle_case_study/#two-stage-competitions","text":"In two-stage competitions the challenge is split into two parts: Stage 1 and Stage 2, with the second stage building on the results teams achieved in Stage 1. Stage 2 involves a new test dataset that is released at the start of the stage. One example of such a competition is the Nature Conservancy Fisheries Monitoring Competition .","title":"Two-stage Competitions"},{"location":"challenges/kaggle_case_study/#code-competitions","text":"Some competitions are code competitions. In these competitions all submissions are made from inside of a Kaggle Notebook, and it is not possible to upload submissions to the Competition directly. These competitions have two attractive features. The competition is more balanced, as all users have the same hardware allowances. And the winning models tend to be far simpler than the winning models in other competitions, as they must be made to run within the compute constraints imposed by the platform. Hardware restrictions may be implemented for this format. An example of a code competition is Quora Insincere Questions Classification .","title":"Code Competitions"},{"location":"challenges/kaggle_case_study/#joining-a-competition","text":"Each competition in Kaggle has a homepage. This is an example of one. Rules : This contains the rules that govern your participation in the sponsor\u2019s competition. You must accept the competition\u2019s rules before downloading the data or making any submissions. Users who do not abide by the rules may have their submissions invalidated at the end of the competition or banned from the platform. Discussion : If anything is unclear or you have a question about participating, the competition\u2019s forums are the perfect place to ask. Overview : The information provided in the Overview tabs will vary from Competition to Competition. Five elements which are almost always included and should be reviewed are the \u201cDescription,\u201d \u201cData\u201d, \u201cEvaluation,\u201d \u201cTimeline,\u201d & \u201cPrizes\u201d sections. The description gives an introduction into the competition\u2019s objective and the sponsor\u2019s goal in hosting it. The data tab is where you can download and learn more about the data used in the competition. The evaluation section describes how to format your submission file and how your submissions will be evaluated. The timeline has detailed information on the competition timeline. The prizes section provides a breakdown of what prizes will be awarded to the winners, if prizes are relevant. This may come in the form of monetary, swag, or other perks. In addition to prizes, competitions may also award ranking points towards the Kaggle progression system. This is shown at the bottom of the Overview page. Once you have chosen a competition, read and accepted the rules, and made yourself aware of the competition deadlines, you are ready to submit!","title":"Joining a Competition"},{"location":"challenges/kaggle_case_study/#forming-a-team","text":"Everyone that competes in a Competition does so as a team. A team is a group of one or more users who collaborate on the competition. Weather you are on a team or not, submissions are limited per team. Team Leader : They are the primary point of contact when we need to communicate with a team, every other person in the team is a Member. Team Name : Anyone in the team can modify the team name by visiting the Team tab.","title":"Forming a Team"},{"location":"challenges/kaggle_case_study/#leaderboard","text":"One of the most important aspects of Kaggle Competitions is the Leaderboard: The Competition leaderboard has two parts. The public leaderboard provides publicly visible submission scores based on a representative sample of the submitted data. This leaderboard is visible throughout the competition. The private leaderboard , by contrast, tracks model performance on data unseen by participants. The private leaderboard thus has final say on whose models are best, and hence, who the winners and losers of the Competition will be.","title":"Leaderboard"},{"location":"challenges/kaggle_case_study/#summary","text":"Kaggle competition is aimed more towards machine learning and they have tools to upload data and use online notebooks which are written using python or R language only. They also have additional features: Teams Four challenge types Prizes that range from 'flairs' to large sums of money Leader boards Notebooks; user-friendly way to start coding Ways for commercial companies to make challenges","title":"Summary"}]}